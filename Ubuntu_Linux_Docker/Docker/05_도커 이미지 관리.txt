직접 만든 이미지나 공식 이미지들에 대해 수정이 필요할 수 있음
	1. 파일 복사/마운트를 이용하는 방법
	2. 컨테이너 내부에 쉘을 이용하여 직접 수정하는 방법

		docker exec를 이용해서 /bin/bash 를 실행하면 컨테이너 내부 쉘을 이용할 수 있음

		실행 중인 컨테이너에 exec 명령어에서 사용 시 쉘 이용 지정
			docker exec [옵션] 컨테이너이름 /bin/bash
		run 명령어로 컨테이너를 실행 시킬 때 쉘 이용 지정
			docker run [옵션] 이미지이름 /bin/bash

		쉘 종료하고 나가기
		exit

도커 이미지 생성 시 공식 이미지를 도커 허브에서 다운받아 이용하는 것이 일반적
이미 존재하는 컨테이너를 이용해서 커스텀이미지를 만들 수 있음
이를 다른 컴퓨터로 이동할 수 있으므로 환경 배포나 서비스 배포에 활용할 수 있음

이미지를 만드는 법
	- commit 명령으로 기존 컨테이너를 이미지로 변환
	- Dockerfile 정의


※ commit 명령어로 컨테이너를 이미지로 만들기
- 컨테이너를 준비하고 이미지로 변환
- 명령어 한 번으로 이미지를 만들 수 있으므로 간편
- 기존 컨테이너를 복제하거나 이동할 때 편리
	
	1. 아파치 컨테이너 생성
	2. 컨테이너에 접속 및 수정
	3. 컨테이너를 이미지로 변환


1. 아파치 컨테이너 생성
$ docker run --name myweb -d -p 8080:80 httpd

2. 컨테이너 내부 수정
$ docker exec -it myweb bash
root@07753249f862:/usr/local/apache2# cd htdocs/
root@07753249f862:/usr/local/apache2/htdocs# echo "<h1>hello</h1>" > index.html
root@07753249f862:/usr/local/apache2/htdocs# ls
index.html
root@07753249f862:/usr/local/apache2/htdocs# exit
exit

3. commit으로 이미지 생성
$ docker commit myweb myhttpd

생성된 이미지 확인
$ docker image ls
REPOSITORY         TAG       IMAGE ID       CREATED         SIZE
httpd              latest    bfe6700e6779   2 months ago     147MB
myhttpd              latest    bfe6700e6779   2 months ago    147MB

생성된 이미지로 컨테이너 생성하기
$ docker run --name myweb2 -d -p 8090:80 myhttpd


※ Dockerfile 사용하기
	명령			설명
	ADD			로컬 또는 원격 파일 및 디렉터리를 추가합니다.
	ARG			빌드 시간 변수를 사용합니다.
	CMD			기본 명령을 지정합니다.
	COPY			파일 및 디렉터리를 복사합니다.
	ENTRYPOINT	기본 실행 파일을 지정합니다.
	ENV			환경 변수를 설정합니다.
	EXPOSE		응용 프로그램이 수신 대기 중인 포트를 설명합니다.
	FROM		기본 이미지에서 새 빌드 단계를 만듭니다.
	HEALTHCHECK	시작 시 컨테이너의 상태를 확인합니다.
	LABEL		이미지에 메타데이터를 추가합니다.
	MAINTAINER	이미지의 작성자를 지정합니다.
	ONBUILD		빌드에서 이미지를 사용하는 경우에 대한 지침을 지정합니다.
	RUN			빌드 명령을 실행합니다.
	SHELL		이미지의 기본 셸을 설정합니다.
	STOPSIGNAL	컨테이너를 종료하기 위한 시스템 호출 신호를 지정합니다.
	USER			사용자 및 그룹 ID를 설정합니다.
	VOLUME		볼륨 마운트를 만듭니다.
	WORKDIR		작업 디렉토리를 변경합니다.

docker build -t [생성할 이미지 이름] [이미지 생성 대상 폴더]

도커파일 생성하기
$ ls exdir/
$ cd exdir/
$ vim index.html
-------------------------------------------------------
<!DOCTYPE html>
<html>
<head>
	<title>index page</title>
</head>
<body>
	<h1>Hello! Welcome to My Site!</h1>
	<a href="dir/info.html">info</a>
</body>
</html> 
:wq
-------------------------------------------------------


$ vim info.html
-------------------------------------------------------
<ul>
	<li>apple</li>
	<li>banana</li>
	<li>orange</li>
</ul>
:wq
-------------------------------------------------------

$ vim Dockerfile
-------------------------------------------------------
FROM httpd
RUN mkdir /usr/local/apache2/htdocs/dir
COPY index.html /usr/local/apache2/htdocs
COPY info.html /usr/local/apache2/htdocs/dir
-------------------------------------------------------

이미지 빌드 하기
$ docker build -t myhttpd2 .

생성된 이미지 확인
$ docker images
REPOSITORY         TAG       IMAGE ID       CREATED          SIZE
myhttpd              latest    bfe6700e6779   2 months ago    147MB
myhttpd2           latest    89adbc7841c9   54 seconds ago   147MB
httpd              latest    bfe6700e6779   2 months ago     147MB

컨테이너 생성
$ docker run --name myweb2 -d -p 8080:80 myhttpd2

웹 브라우저로 접속 테스트

※ 이미지를 파일로 내보내기/가져오기
내보내기
$ docker save -o myhttpd.tar myhttpd
$ docker save -o myhttpd2.tar myhttpd2
$ docker save -o mysite.tar mysite

확인
$ ls
Dockerfile  index.html  info.html  myhttpd.tar  myhttpd2.tar

기존 이미지 모두 삭제
$ docker images rm myhttpd myhttpd2

가져오기
$ docker load -i myhttpd.tar
$ docker load -i myhttpd2.tar

가져온 이미지 확인
$ docker image ls
REPOSITORY   TAG       IMAGE ID       CREATED          SIZE
myhttpd              latest    89adbc7841c9   2 months ago    147MB
myhttpd2     latest    89adbc7841c9   10 minutes ago   147MB
httpd        latest    bfe6700e6779   2 months ago     147MB

컨테이너 실행
$ docker run --name myweb -d -p 8080:80 myhttpd

브라우저로 접속 테스트


[실습]
nginx 베이스 이미지로 앞서 만든 index.html과 info.html을 포함하는 이미지 생성하기
1. commit을 이용하여 mynginx 이미지 생성 및 컨테이너 실행 후 브라우저 접속 테스트
2. Dockerfile을 이용하여 1번과 동일한 설정으로 mynginx2이름의 이미지 생성 후 컨테이너 실행 및 브라우저 접속 테스트
3. ubuntu 베이스에 vim과 net-tools 설치하기(commit)
4. centos 베이스에 vim과 httpd 설치하기(Dockerfile)
5. 생성된 이미지를 파일로 내보내기
6. 기존에 직접 생성한 이미지는 모두 삭제
7. 5번에서 내보냈던 파일(xxx.tar)을 가져와서 압축 해재
8. 만들어진 이미지로 컨테이너 생성하기
9. 접속 테스트(브라우저, docker exec 등 활용)

