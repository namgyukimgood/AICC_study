※ kubectl 명령 사용
	작성된 매니패스트 파일을 쿠버네티스로 읽어 들여 실제 파드 생성
	쿠버네티스는 매니패스트 파일의 내용을 따라 한 번에 모든 리소스 생성
	'바람직한 상태'를 유지하는 과정을 쿠버네티스가 제어
	create, delete, get, set, apply, scale, logs 등이 많이 사용되는 명령

※ 디플로이먼트 실행하기
	디플로이먼트의 매니패스트 파일을 사용하여 파드 생성
	apply 명령으로 매니패스트 파일을 읽어들여 실제 리소스에 반영
	
	디플로이먼트의 매니패스트 파일을 통해 생성되는 것이 파드
	직접 접근하여 동작 확인 불가
	서비스부터는 직접 접근 가능

$ minikube start

$ docker ps

$ kubectl apply -f exdep_manifest.yml

$ kubectl get pods

$ kubectl describe deployment

대시보드에서 GUI를 통해 동작 확인

이어서 서비스 실행
$ kubectl apply -f exsvc_manifest.yml

$ kubectl get services

$ kubectl describe service

서비스가 실행되었으므로 서비스 요청 가능
$ minikube ip

curl http://192.168.49.2:30080

쿠버네티스 기능 사용해보기
- 파드 수 조정
	exdep_manifest.yml 수정 하기
	replicas: 3 -> 5로 수정 하고 저장

	쿠버네티스에 수정 사항 반영
	$ kubectl apply -f exdep_manifest.yml

	dashboard에서 파드 수 변경 확인

- 이미지 변경하기
	exdep_manifest.yml 수정 하기
	image: 속성에 httpd를 nginx로 수정

	쿠버네티스에 수정 사항 반영
	$ kubectl apply -f exdep_manifest.yml

	dashboard에서 파드 교체  확인

- 파드에 문제가 생기는 경우 '바람직한 상태' 유지 확인
수동으로 파드 삭제 후 확인해보기
	kubectl get pods 로 파드 확인하면서 진행
	
	$ kubectl get pods
	NAME                       READY   STATUS    RESTARTS   AGE
	exdep01-768b7c9579-2fn9d   1/1     Running   0          17s
	exdep01-768b7c9579-2p2gv   1/1     Running   0          17s
	exdep01-768b7c9579-6kmxj   1/1     Running   0          17s

	파드 중 하나 선택해서 삭제해보기
	$ kubectl delete pod exdep01-768b7c9579-2fn9d
	pod "exdep01-768b7c9579-2fn9d" deleted

	다시 새로운 pod가 생성된 것 확인(2fn9d가 삭제되어 9k89q가 생성됨)
	$ kubectl get pods
	NAME                       READY   STATUS    RESTARTS   AGE
	exdep01-768b7c9579-2p2gv   1/1     Running   0          83s
	exdep01-768b7c9579-6kmxj   1/1     Running   0          83s
	exdep01-768b7c9579-9k89q   1/1     Running   0          9s

- 리소스 정리하기
 레플리카 수를 0으로 만들면 모든 파드가 삭제됨
 디플로이먼트와 서비스는 남아 있음

	디플로이먼트 삭제
	$ kubectl delete -f exdep_manifest.yml

	서비스 삭제
	$ kubectl delete -f exsvc_manifest.yml


여기까지는 도커와 쿠버네티스의 기본적인 동작 개념과 핸들링을 확인
실전으로 사용하려면 이를 더 응용해보아야 한다.

도커/쿠버를 이용하려는 목적을 잘 설정하고
거기에 필요한 부분을 추가적으로 습득해 나아가야 한다.

기본적으로 네트워크/서버에 대한 지식이 필요
그 후에 도커와 쿠버를 사용하는 개념을 다양하게 연습
클라우드 환경에서 동일하게 쿠버를 활용

※ 학습 과정 제안

배포된 이미지를 사용하는 개발자/디자이너
	이 정도 수준으로 충분
	볼륨 마운트 방법 추가 학습 필요
	
기존 컨테이너를 커스텀하고 싶은 개발자
	docker exec -it 컨테이너이름 /bin/bash를 활용
	컨테이너 내부에서 다양한 리눅스 명령어 사용 필수(리눅스 공부)
	
도커 이미지를 만들어야 되는 사람
	수석 엔지니어 등 도커 이미지를 만들어야 된다면 Dockerfile 스크립트 학습
	리눅스 기본 지식 필요
	도커 허브 등 도커 레지스트리 사용법 필요
	
CI/CD 환경에서 도커를 사용하는 사람
	요즘 개발 - 테스트 - 운영을 자동화 하는 방식으로 개발을 많이 함
	도커가 CI/CD에서 어떻게 사용되는지 학습 필요
	
도커/쿠버네티스 환경을 베이스로 하는 개발을 이해해야 하는 경우
	개발자는 도커/쿠버네티스 환경에서 개발하는 개념을 이해하고 있어야 함
	마운트 개념 중요
	도커에서 사용되는 여러가지 컨벤션을 알아 두어야 함
	
운영 업무와 가까운 사람
	인프라를 다루는 사람이라면 리눅스로 도커 사용하기
	쿠버네티스 학습도 보다 더 해야 함
	
