※ Kubernetes
	여러 컨테이너를 관리해주는 컨테이너 오케스트레이션 도구
	여러 컨테이너를 지휘하는 것
	줄여서 k8s라고 부름

	도커는 한 대의 물리적 서버에서 실행되는 경우가 많음
	쿠버네티스는 여러 대의 물리적 서버를 전제로 함
	물리적 서버 여러 개에서 동작되는 컨테이너들을 모두 관리하는 역할

	번거로운 컨테이너 생성 및 관리를 해주는 도구
	매니패스트라는 파일을 정의하여 사용

※ 마스터 노드와 워커 노드
	노드: 물리적 서버 개념

	마스터(감독) 노드
		쿠버네티스의 전체 제어를 담당
		컨테이너를 실행하지 않으며 워커 노드에서 실행되는 컨테이너들을 관리
	워커 노드
		실제 서버에 해당되는 부분
		컨테이너가 동작되는 서버
	

	마스터 노드와 워커 노드로 구성된 쿠버네티스 시스템을 클러스터라고 함
	클러스터내에서 마스터 노드는 매니패스트로 정의된 내용에 따라 워커 노드를 관리함

	쿠버네티스는 도커엔진과 같은 컨테이너 엔진과는 다른 별개의 소프트웨어
		쿠버네티스 소프트웨어, CNI(Container Networking Interface)설치 필요
			CNI 소프트웨어: 플란넬, 칼리코, AWS VPC CNI 등이 있음
		
		마스터 노드는 컨테이너 등 상태 관리를 위해 etcd라는 DB가 설치됨
		워커노드는 컨테이너 엔진(도커)이 필요
	
		마스터 노드를 관리하는 관리자 컴퓨터는 kubectl 설치 필요
		이를 통해 마스터 노드에 로그인하여 설정이 가능

쿠버네티스는 항상 '바람직한' 상태를 유지
	일일이 명령어를 통해 컨테이너 관리를 제어할 수 있으나 
	yml파일에 원하는 '바람직한 상태'를 정의하고 
	이를 통해 쿠버네티스가 자동으로 관리하도록 하는 것이 쿠버네티스 컨셉

도커 컴포즈와의 차이
	컴포즈는 옵션을 지정해 수동으로 컨테이너 수를 조작할 수 있지만 모니터링 기능 없음
	전반적으로 생성/중지/삭제만 가능
	쿠버네티스는 정의해둔 상태를 '스스로 유지'하도록 하는 것

※ 쿠버네티스 관련 용어
파드(pod)
	컨테이너를 관리하는 단위
	컨테이너와 볼륨을 함께 묶은 것
	일반적으로 파드 하나가 컨테이너 하나

서비스(Service)
	파드를 묶어서 관리하는 단위
	서비스가 관리하는 파드는 기본적으로 모두 동일한 구성을 가짐
	파드가 여러 개의 워커 노드에 걸쳐 동작하더라도 관리 가능
	요청을 부하분산하는 로드벨런서
	각 서비스는 자동적으로 고정IP를 부여받음(Cluster IP)
	내부적으로 여러 개의 파드가 있어도 외부에서는 하나의 IP로 접근

	서비스가 분배하는 통신은 하나의 워커노드 안으로 제한되어 있음
	여러 워커노드 간 분배는 실제 로드벨런서나 인그레스가 담당함
	이는 마스터, 워커노드가 아닌 별도의 노드에서 동작하거나 물리적인 하드웨어임

레플리카셋(ReplicaSet)
	파드의 수를 관리하는 역할
	정의 파일에 기반하여 파드 개수를 유지
	레플리카셋이 관리하는 동일한 구성의 파드를 레플리카라고 부름
	단독으로 사용되는 경우는 드물고 디플로이먼트와 함께 사용됨

디플로이먼트(Deployment)
	파드의 배포를 관리하는 요소
	파드가 사용하는 이미지 등 파드에 대한 정보를 가짐

※ 쿠버네티스 설치 및 사용
쿠버네티스도 종류가 있음
	쿠버네티스는 클라우드 네이티브 컴퓨팅 재단에서 제정한 표준
	구글에서 개발되었지만 구글 등의 회사가 CNCF를 조직하여 이 재단에 기술을 기부
	오픈소스로 전환되면서 보급률이 증가됨

	AWS, 애저, GCP 등 클라우드 서비스에서 각 자사 서비스에 맞게 커스터마이징된 쿠버네티스를 제공
	호환성이 검증된 소프트웨어나 서비스에는 Certified Kubernetes인증이 부여됨

	원조 쿠버네티스는 직접 사용하기 어려움
		도커 데스크탑의 경우 내장된 쿠버네티스를 사용하는 방법이 있음(etcd, CNI 설치 불필요)
		리눅스에서는 Minikube가 있음

	일반적으로 쿠버네티스는 본래 대규모 시스템을 전제로 함
		마스터 노드와 워커 노드도 별도의 물리적 컴퓨터로 설정함
		도커 데스크톱이나 Minikube에서는 컴퓨터 한 대에 마스터 노드와 워커 노드 모두 구성 가능

	쿠버네티스를 적용한 현장은 '안정성이 생명'인 시스템 '사용량이 많은' 시스템이 대부분
	도커, 쿠버네티스 외에 다양한 지식이 필요함
	학습방법은 간단한 환경에서 충분히 연습하고 점점 확장해 나아가야 함

