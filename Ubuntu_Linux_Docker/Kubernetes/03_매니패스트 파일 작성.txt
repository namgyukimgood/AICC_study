Manifest 파일(정의 파일)
	쿠버네티스는 매니패스트 파일에 작성된 내용에 따라 파드를 생성
	매니패스트 파일의 내용을 쿠버네티스에 업로드하면 내용이 etcd 데이터베이스에 
	'바람직한 상태'로 등록되고 이를 유지한다.
	yaml, json 형식을 작성

	매니패스트 파일은 리소스 단위로 작성
		파드, 서비스, 디플로이먼트. 레플리카셋 등
		파드항목은 직접 사용하지 않는다.(개수 유지 기능이 없기 때문)
		레플리카셋도 디플로이먼트에서 개수를 관리
		일반적으로 디플로이먼트 항목을 정의
	
		아파치 파드를 생성한다면
			아파치 디플로이먼트 + 아파치 서비스
			위와 같이 두 개의 리소스를 작성
		
	리소스 단위로 파일을 분할할 수 있고 하나에 모두 작성할 수 있음
	하나의 파일에 작성 시 --- 로 각 리소스를 구분

매니패스트 파일 작성 방법
--------------------------------
apiVersion: API그룹 및 버전
kind: 리소스 유형
metadata: 메타 데이터
spec: 리소스 내용
--------------------------------

리소스 유형 확인
$ kubectl api-resources

리소스 유형을 제일 먼저 작성 중요
메타데이터
	리소스의 이름, 레이블을 작성
스팩
	리소스의 내용을 정의
	어떤 리소스를 만들 것인가하는 부분
	스팩의 내용은 리소스 유형에 따라 달라짐

레이블(셀렉터)
	파드나 서비스와 같은 리소스에 붙이는 명칭
	키-값 형태로 설정
	셀렉터 기능을 사용하여 특정 레이블이 부여된 파드만을 배포할 수 있음
	
	예시)
		팽귄 시스템, 바다코끼리 시스템이라는 서비스를 운영하는 회사가
		골드/실버/알루미늄 등의 등급으로 파드를 나눈다면
		레이블로 관리할 때 팽귄 시스템과 관련된 파드
		골드 회원과 관련된 파드를 지정하여 액션 지정 가능

매니패스트 파일의 API그룹이나 리소스 유형은 작성할 내용이 거의 정형화 되어 있음
메타데이터, 스펙은 리소스 유형이나 설정 내용에 따라 작성 내용이 달라짐

※ 매니패스트 작성하기

▶Pod
파드의 메타데이터와 스펙 작성
단독으로 파드만 사용되는 경우는 거의 없음
대부분 디플로이먼트에 포함되는 형태로 작성됨
따라서 디플로이먼트의 매니패스트 파일은 여러 계층으로 복잡함

여기서는 이해를 위해 파드를 먼저 작성하고 이 후 디플로이먼트안에 작성하는 방식으로 진행

파드는 중항목이 세 개
	메타데이터 하위로 name, label
	스팩 하위로 containers에 컨테이너 구성을 작성
	volumes항목도 있으나 작성하지 않는 경우가 많아 생략함
	파드에 속한 volume은 파드에 포함된 컨테이너들끼리 데이터를 공유하기 위한 것

	containers 하위에 name, image, ports가 포함

형식
---------------------------------------
apiVersion:	
kind:	
metadata:	
    name:	 파드 이름
    labels:	레이블
spec:	
    containers:	컨테이너 구성
      - name:	컨테이너 이름
        image:	이미지 이름
        ports:	포트 설정
---------------------------------------

api그룹버전	v1
리소스 유형	Pod
파드 이름	expod01
레이블	app: exkube01
컨테이너 이름	myweb01
이미지 이름	httpd
포트 설정	containerPort: 80

expod_manifest.yml 작성
---------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: expod01
  labels:
    app: exkube01
spec:
  containers:
  - name: myweb01
     image: httpd
     ports: 
        - containerPort: 80
---------------------------------------

▶Deployment
파드가 하나의 팀이고 컨테이너가 구성원이라면 디플로이먼트는 부서(과)에 비유할 수 있음

apiVersion:	
kind:	
metadata:	
    name:	디플로이먼트 이름
spec:	
    selector:	셀렉터 설정
        matchLabels:	셀렉터가 선택할 관리 대상 레이블
    replicas:	레플리카 설정
    template:	템플릿(파드의 정보)
        metadata:	파드의 메타데이터 작성

        spec:	파드의 스팩 작성

셀렉터
	디플로이먼트가 특정한 레이블이 지정된 파드를 관리하도록 하는 설정
	matchLabels: 뒤에 레이블을 기재(template 아래에 metadata에 작성된 것)
	
레플리카 설정
	파드의 레플리카에 대한 관리
	파드 수를 '몇 개로 유지'할 것인지 설정(0인 경우 파드 삭제됨)
	
템플릿 작성
	생성할 파드의 정보를 여기에 작성
	앞에서 작성한 파드의 내용과 거의 동일
	파드의 수가 많아지면 레이블로 관리하는 경우가 많아 파드의 이름은 따로 지정하지 않음
	
작성 시 중복처럼 보이는 항목이 있으므로 혼동 주의

api그룹버전	apps/v1
리소스 유형	Deployment
파드 이름	exdep01
셀렉터로 대상을 지정할 레이블	app: exkube01
레플리카(파드) 수	3
컨테이너 이름	myweb01
이미지 이름	httpd
포트 설정	containerPort: 80

exdep_manifest.yml 작성
-----------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exdep01
spec:
  selector:
    matchLabels:
      app: exkube01
  replicas: 3
  template:
    metadata:
      labels:
        app: exkube01
    spec:
      containers:
      - name: myweb01
        image: httpd
        ports:
        - containerPort: 80
-----------------------------------------

▶Service
디플로이먼트와 서비스는 거의 세트로 작성함
서비스의 역할은 파드로 들어오는 요청을 관리하는 것이므로 설정 내용도 통신과 관련됨

apiVersion:	
kind:	
metadata:	
    name:	서비스 이름
spec:	
    type:	서비스 유형
    ports:	포트 설정
        - port:	서비스 포트
          targetPort:	컨테이너의 포트
          protocol:	통신에 사용되는 프로토콜
          nodePort:	워커 노드의 포트
    selector:	셀렉터 설정

type(유형)
	서비스의 종류를 말함
	외부로부터 서비스에 어떤 유형의 IP 주소(또는 DNS)로 접근할 지 설정
		ClusterIP		클러스터IP를 통해 서비스에 접근하도록(외부 접근 불가)
		NodePort		워커 노드의 IP를 통해 서비스에 접근하도록
		LoadBalancer	로드밸런서의 IP를 통해 서비스에 접근하도록
		ExternalName	파드에서 서비스를 통해 외부로 나가기 위한 설정

	ClusterIP로 설정 시 클러스터 IP를 통해 서비스 접근 가능
	클러스터 IP는 사설IP 주소가 설정 되어 있어 클러스터 내부 통신에만 사용 가능
	NodePort로 설정 시 워커 노드에 직접 접근 가능(약간 특수한 경우)
		워커 노드가 직접적으로 무언가 처리하는 구성을 만들었거나 개발 목적 등으로 직접 접근이 필요한 경우 사용
	내부에서 외부로 접근이 필요한 경우 ExternalName으로 지정
	
	일반적으로 LoadBalancer로 설정하는 경우가 대부분

포트 설정
	port는 서비스 포트 지정
	nodePort는 워커 노드 포트 지정(30000 ~ 32767)
	targetPort는 컨테이너의 포트 지정
	
	protocol은 일반적으로 TCP

셀렉터 설정
	서비스가 특정 레이블이 지정된 파드를 선택적으로 관리하기 위한 설정
	파드나 디플로이먼트에서 컨테이너 부분의 설정에 지정된 레이블을 사용
	
	정보) 
	디플로이먼트에서는 matchLabel: 항목이 필수
	서비스에서는 사용하면 안 됨
	
	디플로이먼트와 서비스 모두 셀렉터를 사용하여 파드를 지정
	방식의 차이가 있음
		디플로이먼트는 matchLabel: 항목으로 레이블을 지정하면
		레이블셀렉터를 사용(조건에 부합하는지 확인하는 설정이 가능)
		
	서비스는 리소스를 직접 지정하기 때문에 해당 레이블을 그대로 사용

작성
api그룹버전	v1
리소스 유형	Service
서비스 이름	exsvc01
셀렉터로 대상을 지정할 레이블	app: exkube01
서비스 유형	NodePort
서비스 포트	8099
컨테이너 포트	80
노트 포트	30080
프로토콜	TCP

exsvc_manifest.yml 작성
--------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: exsvc01
spec:
  type: NodePort
  ports:
  - port: 8099
    targetPort: 80
    protocol: TCP
    nodePort: 30080
  selector:
    app: exkube01
--------------------------------------------------